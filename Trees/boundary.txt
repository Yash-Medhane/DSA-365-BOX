 bool isLeaf(Node *root) {
    return !root->left && !root->right;
}
   void addLeft(Node *root,vector<int>&ans){
       Node*curr = root->left;
       while(curr){
           if(!isLeaf(curr)) ans.push_back(curr->data);
           if(curr->left) curr = curr->left;
           else curr = curr->right;
       }
   }
    void addRight(Node *root,vector<int>&ans){
       Node*curr = root->right;
       vector<int>tmp;
       while(curr){
           if(!isLeaf(curr)) tmp.push_back(curr->data);
           if(curr->right) curr = curr->right;
           else curr = curr->left;
       }
       for(int i=tmp.size()-1;i>=0;i--){
           ans.push_back(tmp[i]);
       }
   }
   void addLeaves(Node *root,vector<int>&ans){
       if(isLeaf(root)){
           ans.push_back(root->data);
           return;
       }
       if(root->left)  addLeaves(root->left,ans);
       if(root->right)  addLeaves(root->right,ans);
   }
   
    vector<int> boundaryTraversal(Node *root) {
        vector<int>ans;
        if(!root) return ans;
        if(!isLeaf(root)) ans.push_back(root->data);
        addLeft(root,ans);
        addLeaves(root,ans);
        addRight(root,ans);
        return ans;
    }